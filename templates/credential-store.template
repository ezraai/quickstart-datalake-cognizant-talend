{
    "AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Populate credentials for Talend. (qs-1nrlpbhmu)",
    "Parameters": {

        "TalendS3FileName": {
            "Description": "Talend demo data source bucket.",
            "Type": "String",
            "Default": "oodle-s3.properties"
        },
        "CredentialBucket": {
            "Description": "Talend credentials bucket.",
            "Type": "String"
        },
        "CredentialBucketDnsName": {
            "Description": "Talend credentials bucket DNS name.",
            "Type": "String"
        },
        "CredentialBucketArn": {
            "Description": "Talend credentials bucket ARN.",
            "Type": "String"
        },
        "TalendSourceBucket": {
            "Description": "Talend demo data source bucket.",
            "Type": "String"
        },
        "TalendTargetBucket": {
            "Description": "Talend demo target bucket.",
            "Type": "String"
        },

        "EmrMetadataFileName": {
            "Type": "String",
            "Default": "oodle-emr.properties"
        },
        "EmrMaster": {
            "Type": "String",
            "Default": "disabled"
        },

        "RedshiftMetadataFileName": {
            "Type": "String",
            "Default": "oodle-redshift.properties"
        },
        "RedshiftHost": {
            "Description": "Redshift Host.",
            "Type": "String"
        },
		"RedshiftPort": {
            "Description": "RedShift Port",
            "Type": "String"
        },
		"RedshiftUsername": {
            "Description": "RedShift Username",
            "Type": "String"
        },
        "RedshiftPassword": {
            "Description": "RedShift Password:  Can only contain alphanumeric characters or the following special characters !^*-_+, between 8 and 28 characters.  Must contain at least one lowercase letter, one uppercase letter and one number.",
            "NoEcho": true,
            "Type": "String",
			"MinLength": 8,
            "MaxLength": 28,
            "AllowedPattern": "[a-zA-Z0-9!^*\\-_+]*"
        },
		"RedshiftDbName": {
            "Description": "RedShift Database name",
            "Type": "String"
        },
        
        "RdsMetadataFileName": {
            "Type": "String",
            "Default": "oodle-rds.properties"
        },
        "TacDbHost": {
            "Description": "TAC Host.",
            "Type": "String"
        },
        "TacDbPort": {
            "Description": "TAC Port.",
            "Type": "Number",
            "MinValue": "0",
            "MaxValue": "65535"
        },
        "MasterDbUser": {
            "Description": "The master or root user used to create TAC and AMC databases and the TAC user.",
            "Type": "String"
        },
        "MasterDbPassword": {
            "Description": "Master user database password.",
            "Type": "String",
            "NoEcho": "true"
        },
        "TacDbSchema": {
            "Description": "TAC database schema.",
            "Type": "String"
        },
        "TacUsername": {
            "Description": "TAC database user.",
            "Type": "String"
        },
        "TacPassword": {
            "Description": "TAC database password.",
            "Type": "String",
            "NoEcho": "true"
        },

        "NexusMetadataFileName": {
            "Type": "String",
            "Default": "oodle-nexus.properties"
        },
        "NexusPort": {
            "Description": "Nexus port.",
            "Type": "Number",
            "Default": "8081",
            "MinValue": "1",
            "MaxValue": "65535"
        },
        "NexusAdminUserid": {
            "Description": "Nexus administrator userid.",
            "Type": "String",
            "Default": "admin"
        },
        "NexusAdminPassword": {
            "Description": "Nexus password.",
            "Type": "String",
            "NoEcho": "true"
        },

        "GitMetadataFileName": {
            "Type": "String",
            "Default": "oodle-git.properties"
        },
        "GitProtocol": {
            "Description": "Git protocol.",
            "Type": "String",
            "Default": "http"
        },
        "GitHost": {
            "Description": "Git host.",
            "Type": "String",
            "Default": ""
        },
        "GitPort": {
            "Description": "Git port.",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "65535",
            "Default": "443"
        },
        "GitRepo": {
            "Description": "Git repository.",
            "Type": "String",
            "Default": "oodlejobs"
        },
        "GitAdminUserid": {
            "Description": "Git user.",
            "Type": "String",
            "Default": "tadmin"
        },
        "GitAdminPassword": {
            "Description": "Git password.",
            "Type": "String",
            "NoEcho": "true"
        },
        "GitAdminEmail": {
            "Description": "Git admin contact email.",
            "Type": "String",
            "Default": ""
        },
        "GitTacUserid": {
            "Description": "Git TAC userid.",
            "Type": "String",
            "Default": "tac"
        },
        "GitTacPassword": {
            "Description": "Git TAC password.",
            "Type": "String",
            "NoEcho": "true"
        },
        "GitTacEmail": {
            "Description": "TAC contact email.",
            "Type": "String",
            "Default": ""
        }

    },
    "Resources": {
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "s3writepolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
										"s3:GetObject",
										"s3:DeleteObject"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "${CredentialBucketArn}/*"
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        

        "LambdaKeyValueSerializer": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "LambdaExecutionRole",
            "Properties": {
                "Runtime": "nodejs10.x",
                "Timeout": "120",
                "FunctionName": "SerializeKeyValue",
                "Handler": "index.myHandler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Environment": {
                    "Variables": {
                        "S3BUCKET": {
                            "Ref": "CredentialBucket"
                        }
                    }
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "var response = require('cfn-response');",
                                "var os = require('os');",
                                "exports.myHandler = function(event, context) {",
                                "var AWS = require('aws-sdk');",
                                "var myString, ekey, val;",
                                "myString = '';",
                                "for (ekey in event.ResourceProperties) {",
                                "    if (ekey != 'S3BUCKET' && ekey != 'S3KEY' && ekey != 'ServiceToken') {",
                                "        val = event['ResourceProperties'][ekey];",
                                "        myString += '\"' + ekey + '\"' + '=' + '\"' + val + '\"' + os.EOL;",
                                "    }",
                                "}",
                                "var s3bkt = new AWS.S3({params: {Bucket: process.env.S3BUCKET}});",
                                "var params = {  Body: myString, Key: event.ResourceProperties.S3KEY };",
                                "var responseData = {};",
                                "console.log('Creating S3 key with data source properties in bucket ' + process.env.S3BUCKET);",
                                "s3bkt.upload(params, function(err, data) {",
                                "if (err) {",
                                "    console.log(err, err.stack);",
                                "    responseData = {\"UploadDataSourcePropertiesFile\" : \"FAILED\"};",
                                "    response.send(event, context, response.FAILED, responseData);",
                                "    //context.fail();",
                                "    return;",
                                "} else {",
                                "    console.log('Upload successful');",
                                "    responseData = {\"UploadDataSourcePropertiesFile\" : \"SUCCESS\"};",
                                "    response.send(event, context, response.SUCCESS, responseData);",
                                "    //context.succeed();",
                                "    return;",
                                "}",
                                "});",
                                "};"
                            ]
                        ]
                    }
                }
            }
        },

        "CreateS3PropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaKeyValueSerializer",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaKeyValueSerializer",
                        "Arn"
                    ]
                },
                "TalendSourceBucket": { "Ref": "TalendSourceBucket" },
                "TalendTargetBucket": { "Ref": "TalendTargetBucket" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "TalendS3FileName" }
            }
        },

        "CreateEmrPropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaKeyValueSerializer",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaKeyValueSerializer",
                        "Arn"
                    ]
                },
                "EmrMaster": { "Ref": "EmrMaster" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "EmrMetadataFileName" }
            }
        },

        "CreateRedshiftPropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaKeyValueSerializer",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaKeyValueSerializer",
                        "Arn"
                    ]
                },
                "RedshiftHost": { "Ref": "RedshiftHost" },
                "RedshiftPort": { "Ref": "RedshiftPort" },
                "RedshiftUsername": { "Ref": "RedshiftUsername" },
                "RedshiftPassword": { "Ref": "RedshiftPassword" },
                "RedshiftDbName": { "Ref": "RedshiftDbName" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "RedshiftMetadataFileName" }
            }
        },

        "CreateRdsPropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaKeyValueSerializer",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaKeyValueSerializer",
                        "Arn"
                    ]
                },
                "TacDbHost": { "Ref": "TacDbHost" },
                "TacDbPort": { "Ref": "TacDbPort" },
                "MasterDbUser": { "Ref": "MasterDbUser" },
                "MasterDbPassword": { "Ref": "MasterDbPassword" },
                "TacDbSchema": { "Ref": "TacDbSchema" },
                "TacUsername": { "Ref": "TacUsername" },
                "TacPassword": { "Ref": "TacPassword" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "RdsMetadataFileName" }
            }
        },

        "CreateNexusPropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaKeyValueSerializer",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaKeyValueSerializer",
                        "Arn"
                    ]
                },
                "NexusPort": { "Ref": "NexusPort" },
                "NexusAdminUserid": { "Ref": "NexusAdminUserid" },
                "NexusAdminPassword": { "Ref": "NexusAdminPassword" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "NexusMetadataFileName" }
            }
        },


        "CreateGitPropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaKeyValueSerializer",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaKeyValueSerializer",
                        "Arn"
                    ]
                },
                "GitProtocol": { "Ref": "GitProtocol" },
                "GitHost": { "Ref": "GitHost" } ,
                "GitPort": { "Ref": "GitPort" },
                "GitRepo": { "Ref": "GitRepo" },
                "GitAdminEmail": { "Ref": "GitAdminEmail" },
                "GitAdminUserid": { "Ref": "GitAdminUserid" },
                "GitAdminPassword": { "Ref": "GitAdminPassword" },
                "GitTacEmail": { "Ref": "GitTacEmail" },
                "GitTacUserid": { "Ref": "GitTacUserid" },
                "GitTacPassword": { "Ref": "GitTacPassword" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "GitMetadataFileName" }
            }
        }


    },
    "Outputs": {
        "RdsPropertiesS3Key": {
            "Description": "The object on S3 containing RDS properties",
            "Value": { "Fn::Sub": "${CredentialBucketDnsName}/${RdsMetadataFileName}" }
        },
        "RedshiftPropertiesS3Key": {
            "Description": "The object on S3 containing Redshift properties",
            "Value": { "Fn::Sub": "${CredentialBucketDnsName}/${RedshiftMetadataFileName}" }
        },
        "EmrPropertiesS3Key": {
            "Description": "The object on S3 containing EMR properties",
            "Value": { "Fn::Sub": "${CredentialBucketDnsName}/${EmrMetadataFileName}" }
        }
    }
}
